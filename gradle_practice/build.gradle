plugins {
    id 'com.android.application'
    id 'kotlin-android'
}


android {
    compileSdk 33

    defaultConfig {
        applicationId "com.slcorelibrary.gradle_practice"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets{
        main{
            res.srcDirs = ['/path']
        }
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

//// 获取当前根项目下的文件路径
//println "the root file path is: " + getRootDir().absolutePath
//// 获取build目录下的文件路径
//println "the build file path is: " + getBuildDir().absolutePath
//// 获取当前项目下的文件路径
//println "the project file path is: " + getProjectDir().absolutePath

//println getContent("build.gradle")
//
//def getContent(String path) {
//    try {
//        // 获取当前lib下的文件
//        def file = file(path)
//        return file.text
//    } catch (Exception e) {
//        println "file not found.."
//    }
//    return null
//}

// 拷贝文件
//copy {
//    from file('read.txt')
//    into getRootDir().absolutePath
//}


// 直接通过task函数去创建
// 对task进行配置,在方法参数中进行配置
//task xxxtask(group: 'imoc', description: 'task study') {
//    doLast {
//        println "我是xxxtask"
//    }
//}

// 通过task容器去创建
// 对task进行配置，在方法体内进行配置
//this.tasks.create(name:'yyytask') {
//    setGroup('imoc')
//    description('task study')
//    doLast {
//        println "我是yyytask"
//    }
//}


// doFirst：在某个task执行之前
// doLast：在某个task执行之后
//def startBuildTime, endBuildTime
//this.afterEvaluate { Project project ->
//    // 保证要找的task已经配置完毕
//    def preBuildTask = project.tasks.getByName('preBuild')
//    preBuildTask.doFirst {
//        startBuildTime = System.currentTimeMillis()
//        println 'the start time is:' + startBuildTime
//    }
//
//    def buildTask = project.tasks.getByName('build')
//    buildTask.doLast {
//        endBuildTime = System.currentTimeMillis()
//        println "the build time is :${endBuildTime - startBuildTime}"
//    }
//}

// task执行顺序
//task taskA {
//    println "taskA start"
//    doFirst {
//        println 'taskA dofirst'
//    }
//    doLast {
//        println 'taskA dolast'
//    }
//    println 'taskA end'
//}
//
//task taskB {
//    println 'taskB start'
//    doFirst {
//        println 'taskB dofirst'
//    }
//    doLast {
//        println 'taskB dolast'
//    }
//    println 'taskB end'
//}
//
//
//task finalTask(dependsOn:[taskB,taskA]){
//    println 'fianlTask start'
//    doFirst {
//        println 'finalTask doFirst'
//    }
//    doLast {
//        println 'finalTask doLast'
//    }
//    println 'finalTask end'
//}

// task输入和输出
//task readTask {
//    // 指定输入文件为上一个task的输出
//    inputs.file destFile
//    doLast {
//        def file = inputs.files.singleFile
//        println file.text
//    }
//}
//
//task writeTask {
//    // 为task指定输入
//    inputs.properties("versionCode",this.versionCode)
//    inputs.properties("versionName",this.versionName)
//    inputs.properties("versionInfo",this.versionInfo)
//
//    // 为Task指定输出
//    outputs.file destFile
//    doLast {
//        def data = inputs.getProperties()
//        File file = outputs.getFiles().getSingleFile()
//
//    }
//}

